## Step 1: Load packages
# Load necessary mlr3 packages
library(mlr3)
# Install required packages (only run once)
install.packages(c("mlr3", "mlr3learners", "mlr3verse", "ggplot2"))
## Step 1: Load packages
# Load necessary mlr3 packages
library(mlr3)
library(mlr3learners)
library(mlr3verse)
## Step 1: Load packages
# Load necessary mlr3 packages
library(mlr3)
library(mlr3learners)
library(mlr3verse)
## Step 2: Load and prep data
# Load dataset
library(palmerpenguins)
# Select relevant features and remove rows with missing values
data = na.omit(penguins[, c("species", "bill_length_mm", "bill_depth_mm",
"flipper_length_mm", "body_mass_g")])
# Inspect class balance
table(data$species)
## Step 3: Splitting training and testing subsets
# Split data into training and testing sets (80/20 split)
set.seed(123)
train_ids = sample(seq_len(nrow(data)), size = 0.8 * nrow(data))
train_data = data[train_ids, ]
test_data = data[-train_ids, ]
## Step 4: Define the task
# Create classification task using training data
task_penguins = TaskClassif$new(
id = "penguins",
backend = train_data,
target = "species"
)
## Step 4: Define the task
# Create classification task using training data
task_penguins = TaskClassif$new(
id = "penguins",
backend = train_data,
target = "species"
)
## Step 4: Define the task
# Create classification task using training data
task_penguins = TaskClassif$new(
id = "penguins",
backend = train_data,
target = "species"
)
## Step 5: Set up learner, resampling, and measure
# Define learner: decision tree (rpart)
learner = lrn("classif.rpart")
## Step 1: Load packages
# Load necessary mlr3 packages
library(mlr3)
library(mlr3learners)
# Install required packages (only run once)
install.packages(c("mlr3", "mlr3learners", "mlr3verse", "ggplot2"))
## Step 1: Load packages
# Load necessary mlr3 packages
library(mlr3)
library(mlr3learners)
library(mlr3verse)
## Step 2: Load and prep data
# Load dataset
library(palmerpenguins)
# Select relevant features and remove rows with missing values
data = na.omit(penguins[, c("species", "bill_length_mm", "bill_depth_mm",
"flipper_length_mm", "body_mass_g")])
# Inspect class balance
table(data$species)
## Step 3: Splitting training and testing subsets
# Split data into training and testing sets (80/20 split)
set.seed(123)
train_ids = sample(seq_len(nrow(data)), size = 0.8 * nrow(data))
train_data = data[train_ids, ]
test_data = data[-train_ids, ]
## Step 4: Define the task
# Create classification task using training data
task_penguins = TaskClassif$new(
id = "penguins",
backend = train_data,
target = "species"
)
## Step 1: Load packages
# Load necessary mlr3 packages
library(mlr3)
library(mlr3learners)
library(mlr3verse)
